
CREATE OR REPLACE FUNCTION req_appointment_and_deduce_fee (P_ID NUMERIC, D_ID NUMERIC, A_DATE DATE, A_REASON text) RETURNS varchar AS $body$
DECLARE

	C_FEE NUMERIC;
	C_BALANCE NUMERIC;
	C_BANKNO varchar(50);
	C_TDETAILS varchar(1000);
	C_TTYPE varchar(50);
	C_INOUT varchar(10);
	C_DNAME varchar(50);
	MSG varchar(100);

BEGIN
	SELECT FEE INTO STRICT C_FEE FROM DOCTOR WHERE ID=D_ID;
	SELECT BALANCE INTO STRICT C_BALANCE FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
	IF (C_BALANCE < C_FEE) THEN
		MSG := 'NOT ENOUGH BALANCE';
	ELSE
		INSERT INTO APPOINTMENT(APPOINTED_DATE, PEOPLE_ID, DOCTOR_ID, ACCEPTED, REASON)
		VALUES (A_DATE, P_ID, D_ID, 'F', A_REASON);
		C_BALANCE := C_BALANCE - C_FEE;
		UPDATE ACCOUNT SET BALANCE=C_BALANCE WHERE PEOPLE_ID=P_ID;
		SELECT NAME INTO STRICT C_DNAME FROM DOCTOR WHERE ID=D_ID;
		SELECT BANK_ACCOUNT_NO INTO STRICT C_BANKNO FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
		C_TDETAILS := 'Requested an Appointment with : ' || C_DNAME;
		C_TTYPE := 'REQUESTING APPOINTMENT';
		C_INOUT := 'OUT';
		INSERT INTO TRANSACTIONS(BANK_ACCOUNT_NO, PEOPLE_ID, TRX_TYPE, DETAILS, TRX_DATE, AMOUNT, IN_OUT)
		VALUES (C_BANKNO, P_ID, C_TTYPE, C_TDETAILS, CURRENT_DATE, C_FEE, C_INOUT);
		MSG := 'DONE';
	END IF;
	RETURN MSG;
EXCEPTION
	WHEN OTHERS THEN
		RETURN 'ERROR';
END;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON FUNCTION req_appointment_and_deduce_fee (P_ID NUMERIC, D_ID NUMERIC, A_DATE DATE, A_REASON text) FROM PUBLIC;


--------------------------------------------------


CREATE OR REPLACE FUNCTION issue_book_and_deduce_cost (P_ID NUMERIC, B_ID NUMERIC, I_DATE DATE, R_DATE DATE) RETURNS varchar AS $body$
DECLARE

	C_DAYS NUMERIC;
	C_COST NUMERIC;
	C_BALANCE NUMERIC;
	C_BNAME varchar(100);
	C_BANKNO varchar(50);
	C_TDETAILS varchar(1000);
	C_TTYPE varchar(50);
	C_INOUT varchar(10);
	MSG varchar(100);

BEGIN
	C_DAYS := R_DATE - I_DATE;
	C_COST := C_DAYS*10;
	SELECT BALANCE INTO STRICT C_BALANCE FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
	IF (C_BALANCE < C_COST) THEN
		MSG := 'NOT ENOUGH BALANCE';
	ELSE
		INSERT INTO BOOK_ISSUE(BOOK_ID, PEOPLE_ID, ISSUE_DATE, RETURN_DATE, COST)
		VALUES (B_ID, P_ID, I_DATE, R_DATE, C_COST);
		C_BALANCE := C_BALANCE - C_COST;
		UPDATE ACCOUNT SET BALANCE=C_BALANCE WHERE PEOPLE_ID=P_ID;
		SELECT NAME INTO STRICT C_BNAME FROM BOOKS WHERE ID=B_ID;
		SELECT BANK_ACCOUNT_NO INTO STRICT C_BANKNO FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
		C_TDETAILS := 'Issued a book : ' || C_BNAME;
		C_TTYPE := 'ISSUE BOOK';
		C_INOUT := 'OUT';
		INSERT INTO TRANSACTIONS(BANK_ACCOUNT_NO, PEOPLE_ID, TRX_TYPE, DETAILS, TRX_DATE, AMOUNT, IN_OUT)
		VALUES (C_BANKNO, P_ID, C_TTYPE, C_TDETAILS, CURRENT_DATE, C_COST, C_INOUT);
		MSG := 'DONE';
	END IF;
	RETURN MSG;
EXCEPTION
	WHEN OTHERS THEN
		RETURN 'ERROR';
END;
$body$
LANGUAGE PLPGSQL
;
-- REVOKE ALL ON FUNCTION issue_book_and_deduce_cost (P_ID NUMERIC, B_ID NUMERIC, I_DATE DATE, R_DATE DATE) FROM PUBLIC;


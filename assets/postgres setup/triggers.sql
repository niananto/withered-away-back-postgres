-- to list all the triggers in the database.
-- SELECT  event_object_table AS table_name ,trigger_name         
-- FROM information_schema.triggers  
-- GROUP BY table_name , trigger_name 
-- ORDER BY table_name ,trigger_name 



DROP TRIGGER IF EXISTS auto_diagnosed_by ON subscription CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_auto_diagnosed_by() RETURNS trigger AS $BODY$
DECLARE
  D RECORD;
	E_PEOPLE_ID NUMERIC;
	E_MEMBERSHIP_ID NUMERIC;
	E_COUNT_PATIENTS NUMERIC;
	E_DOC_COUNT NUMERIC;
	E_PEOPLE_COUNT NUMERIC;
	E_DOC_PEOPLE_RATIO NUMERIC;
BEGIN
	E_PEOPLE_ID := NEW.PEOPLE_ID;
	E_MEMBERSHIP_ID := NEW.MEMBERSHIP_ID;
	SELECT COUNT(*) INTO STRICT E_DOC_COUNT FROM DOCTOR;
	SELECT COUNT(*) INTO STRICT E_PEOPLE_COUNT FROM PEOPLE;
	E_DOC_PEOPLE_RATIO := E_PEOPLE_COUNT / E_DOC_COUNT;
	RAISE NOTICE '%', E_DOC_PEOPLE_RATIO;
	IF E_MEMBERSHIP_ID = 1 OR E_MEMBERSHIP_ID = 2 THEN
		FOR D IN (SELECT * FROM DOCTOR ORDER BY FEE DESC)
		LOOP
			SELECT COUNT(*) INTO STRICT E_COUNT_PATIENTS FROM DIAGNOSED_BY DB WHERE DB.DOCTOR_ID=D.ID;
			IF E_COUNT_PATIENTS <= E_DOC_PEOPLE_RATIO THEN
				INSERT INTO DIAGNOSED_BY(PEOPLE_ID, DOCTOR_ID) VALUES (E_PEOPLE_ID, D.ID);
				EXIT;
			END IF;
		END LOOP;
	ELSE
		FOR D IN (SELECT * FROM DOCTOR ORDER BY FEE ASC)
		LOOP
			SELECT COUNT(*) INTO STRICT E_COUNT_PATIENTS FROM DIAGNOSED_BY DB WHERE DB.DOCTOR_ID=D.ID;
			IF E_COUNT_PATIENTS <= E_DOC_PEOPLE_RATIO THEN
				INSERT INTO DIAGNOSED_BY(PEOPLE_ID, DOCTOR_ID) VALUES (E_PEOPLE_ID, D.ID);
				EXIT;
			END IF;
		END LOOP;
	END IF;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql';

CREATE TRIGGER auto_diagnosed_by
	AFTER INSERT ON subscription FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_auto_diagnosed_by();

DROP TRIGGER IF EXISTS auto_doctor_backup ON doctor CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_auto_doctor_backup() RETURNS trigger AS $BODY$
DECLARE
	D_ID NUMERIC;
	D_NAME varchar(50);
	D_QUALIFICATION varchar(150);
	D_hospital_name varchar(50);
	D_phone_no varchar(15);
	D_email_address varchar(30);
	D_fee numeric(8,2);
	DELETED_ON DATE;
BEGIN
	D_ID := OLD.ID;
	D_NAME := OLD.NAME;
	D_QUALIFICATION := OLD.QUALIFICATION;
	D_HOSPITAL_NAME := OLD.HOSPITAL_NAME;
	D_PHONE_NO := OLD.PHONE_NO;
	D_EMAIL_ADDRESS := OLD.EMAIL_ADDRESS;
	D_FEE := OLD.FEE;
	
	INSERT INTO DELETED_DOCTOR(ID, NAME, QUALIFICATION, HOSPITAL_NAME, PHONE_NO, EMAIL_ADDRESS, FEE, DELETED_ON)
	VALUES (D_ID, D_NAME, D_QUALIFICATION, D_HOSPITAL_NAME, D_PHONE_NO, D_EMAIL_ADDRESS, D_FEE, CURRENT_DATE);
RETURN OLD;
END
$BODY$
 LANGUAGE 'plpgsql';

CREATE TRIGGER auto_doctor_backup
	AFTER DELETE ON doctor FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_auto_doctor_backup();

DROP TRIGGER IF EXISTS auto_people_backup ON people CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_auto_people_backup() RETURNS trigger AS $BODY$
DECLARE
	P_ID NUMERIC;
	P_NAME varchar(50);
	P_GENDER varchar(20);
	P_BIRTHDAY timestamp;
	P_phone_no varchar(15);
BEGIN
	P_ID := OLD.ID;
	P_NAME := OLD.NAME;
	P_GENDER := OLD.GENDER;
	P_BIRTHDAY := OLD.BIRTHDAY;
	P_phone_no := OLD.phone_no;
	
	INSERT INTO DELETED_PEOPLE(ID, NAME, GENDER, BIRTHDAY, phone_no, DELETED_ON)
	VALUES (P_ID, P_NAME, P_GENDER, P_BIRTHDAY, P_phone_no, CURRENT_DATE);
RETURN OLD;
END
$BODY$
 LANGUAGE 'plpgsql';

CREATE TRIGGER auto_people_backup
	AFTER DELETE ON people FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_auto_people_backup();

DROP TRIGGER IF EXISTS auto_room_allotment ON people CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_auto_room_allotment() RETURNS trigger AS $BODY$
DECLARE
  BR RECORD;
	CURR_PEOPLE_ID NUMERIC;
	CURR_CAPACITY NUMERIC;
	CURR_COUNT NUMERIC;
BEGIN
	CURR_PEOPLE_ID := NEW.ID;
	FOR BR IN (SELECT * FROM BED_ROOM)
	LOOP
		SELECT CAPACITY INTO STRICT CURR_CAPACITY FROM ROOM R WHERE R.ID=BR.ROOM_ID;
		SELECT COUNT(*) INTO STRICT CURR_COUNT FROM BED_ROOM WHERE ROOM_ID=BR.ROOM_ID;
		IF CURR_COUNT < CURR_CAPACITY THEN
			INSERT INTO ROOM_ALLOTMENT(ROOM_ID, PEOPLE_ID)
			VALUES (BR.ROOM_ID, CURR_PEOPLE_ID);
			EXIT;
		END IF;
	END LOOP;
RETURN NEW;
END
$BODY$
 LANGUAGE 'plpgsql';

CREATE TRIGGER auto_room_allotment
	AFTER INSERT ON people FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_auto_room_allotment();

DROP TRIGGER IF EXISTS auto_staff_backup ON staff CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_auto_staff_backup() RETURNS trigger AS $BODY$
DECLARE
	S_ID NUMERIC;
	S_NAME varchar(50);
	S_BIRTHDATE DATE;
	S_SALARY NUMERIC(8,2);
BEGIN
	S_ID := OLD.ID;
	S_NAME := OLD.NAME;
	S_BIRTHDATE := OLD.BIRTHDATE;
	S_SALARY := OLD.SALARY;
	
	INSERT INTO DELETED_STAFF(ID, NAME, BIRTHDATE, SALARY, DELETED_ON)
	VALUES (S_ID, S_NAME, S_BIRTHDATE, S_SALARY, CURRENT_DATE);
RETURN OLD;
END
$BODY$
 LANGUAGE 'plpgsql';

CREATE TRIGGER auto_staff_backup
	AFTER DELETE ON staff FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_auto_staff_backup();

DROP TRIGGER IF EXISTS return_doctor_fee_on_appointment_delete ON appointment CASCADE;
CREATE OR REPLACE FUNCTION trigger_fct_return_doctor_fee_on_appointment_delete() RETURNS trigger AS $BODY$
DECLARE
	D_ID NUMERIC;
	P_ID NUMERIC;
	C_FEE NUMERIC;
	C_BALANCE NUMERIC;
	C_DNAME varchar(100);
	C_BANKNO varchar(50);
	C_TDETAILS varchar(1000);
	C_TTYPE varchar(50);
	C_INOUT varchar(10);
BEGIN
	P_ID := OLD.PEOPLE_ID;
	D_ID := OLD.DOCTOR_ID;
	
	SELECT FEE INTO STRICT C_FEE FROM DOCTOR WHERE ID=D_ID;
	SELECT BALANCE INTO STRICT C_BALANCE FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
	C_BALANCE := C_BALANCE + C_FEE;
	UPDATE ACCOUNT SET BALANCE=C_BALANCE WHERE PEOPLE_ID=P_ID;
		
	SELECT NAME INTO STRICT C_DNAME FROM DOCTOR WHERE ID=D_ID;
	SELECT BANK_ACCOUNT_NO INTO STRICT C_BANKNO FROM ACCOUNT WHERE PEOPLE_ID=P_ID;
	C_TDETAILS := 'Rejected your requested Appointment : ' || C_DNAME;
	C_TTYPE := 'REJECTING APPOINTMENT';
	C_INOUT := 'IN';
	
	INSERT INTO TRANSACTIONS(BANK_ACCOUNT_NO, PEOPLE_ID, TRX_TYPE, DETAILS, TRX_DATE, AMOUNT, IN_OUT)
	VALUES (C_BANKNO, P_ID, C_TTYPE, C_TDETAILS, CURRENT_DATE, C_FEE, C_INOUT);
RETURN OLD;
END
$BODY$
 LANGUAGE 'plpgsql';

CREATE TRIGGER return_doctor_fee_on_appointment_delete
	AFTER DELETE ON appointment FOR EACH ROW
	EXECUTE PROCEDURE trigger_fct_return_doctor_fee_on_appointment_delete();

